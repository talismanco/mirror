<testsuites>
  <testsuite name="pkg/cmd/root.go" tests="4" errors="0" failures="4">
    <testcase name="errcheck" classname="pkg/cmd/root.go:45:14">
      <failure message="Error return value of `Root.Execute` is not checked"><![CDATA[	Root.Execute()]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/cmd/root.go:6:5">
      <failure message="`Root` is a global variable"><![CDATA[var Root = &cli.Command{]]></failure>
    </testcase>
    <testcase name="lll" classname="pkg/cmd/root.go:31">
      <failure message="line is 125 characters"><![CDATA[	Use.PersistentFlags().BoolP("use-defaults", "f", false, "Uses default values in project.json instead of prompting the user")]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/cmd/root.go:11:12">
      <failure message="block should not start with a whitespace"><![CDATA[func Run() {]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/init.go" tests="2" errors="0" failures="2">
    <testcase name="gochecknoglobals" classname="pkg/cmd/init.go:14:5">
      <failure message="`Init` is a global variable"><![CDATA[var Init = &cli.Command{]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/init.go:24:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;init: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("init: %s", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/rename.go" tests="5" errors="0" failures="5">
    <testcase name="gochecknoglobals" classname="pkg/cmd/rename.go:23:5">
      <failure message="`Rename` is a global variable"><![CDATA[var Rename = &cli.Command{]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/rename.go:38:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;rename: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("rename: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/rename.go:40:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;Template %q couldn&#39;t be found in the template registry\&#34;, tmplName)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("Template %q couldn't be found in the template registry", tmplName))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/rename.go:45:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;rename: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("rename: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/rename.go:50:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;rename: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("rename: %s", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/util/exec/cmd.go" tests="4" errors="0" failures="4">
    <testcase name="wsl" classname="pkg/util/exec/cmd.go:35:2">
      <failure message="assignments should only be cuddled with other assignments"><![CDATA[	out := string(outBuf)]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/util/exec/cmd.go:42:2">
      <failure message="assignments should only be cuddled with other assignments"><![CDATA[	errMsg := string(errBuf)]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/util/exec/cmd.go:46:16">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;errors.New(errMsg)&#34;"><![CDATA[			return out, errors.New(errMsg)]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/util/exec/cmd.go:27:5">
      <failure message="shadow: declaration of &#34;err&#34; shadows declaration at line 17"><![CDATA[	if err := cmd.Start(); err != nil {]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/util/tlog/log.go" tests="7" errors="0" failures="7">
    <testcase name="gochecknoglobals" classname="pkg/util/tlog/log.go:33:2">
      <failure message="`logLevel` is a global variable"><![CDATA[	logLevel Level]]></failure>
    </testcase>
    <testcase name="gochecknoinits" classname="pkg/util/tlog/log.go:162:1">
      <failure message="don&#39;t use `init` function"><![CDATA[func init() {]]></failure>
    </testcase>
    <testcase name="gocritic" classname="pkg/util/tlog/log.go:151:3">
      <failure message="appendCombine: can combine chain of 2 appends into one"><![CDATA[		tokens = append(tokens, color.New(color.Bold, color.FgWhite).SprintFunc()(fmt.Sprintf("   Choose from %v..%v", 1, len(val))))]]></failure>
    </testcase>
    <testcase name="gocritic" classname="pkg/util/tlog/log.go:59:18">
      <failure message="captLocal: `LogLevelString&#39; should not be capitalized"><![CDATA[func SetLogLevel(LogLevelString string) {]]></failure>
    </testcase>
    <testcase name="godot" classname="pkg/util/tlog/log.go:11:1">
      <failure message="Top level comment should end in a period"><![CDATA[// TODO default to ASCII if Unicode is not supported]]></failure>
    </testcase>
    <testcase name="godot" classname="pkg/util/tlog/log.go:78:1">
      <failure message="Top level comment should end in a period"><![CDATA[// TODO add log levels]]></failure>
    </testcase>
    <testcase name="godot" classname="pkg/util/tlog/log.go:161:1">
      <failure message="Top level comment should end in a period"><![CDATA[// TODO use dependency injection wrapper for fmt.Print usage in the code base]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/config/config.go" tests="3" errors="0" failures="3">
    <testcase name="gochecknoglobals" classname="pkg/config/config.go:49:5">
      <failure message="`Configuration` is a global variable"><![CDATA[var Configuration = struct {]]></failure>
    </testcase>
    <testcase name="gochecknoinits" classname="pkg/config/config.go:64:1">
      <failure message="don&#39;t use `init` function"><![CDATA[func init() {]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/config/config.go:68:14">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;environment variable ${HOME} should be set\&#34;)&#34;"><![CDATA[		exit.Error(fmt.Errorf("environment variable ${HOME} should be set"))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/util/stringutil/stringutil.go" tests="2" errors="0" failures="2">
    <testcase name="unconvert" classname="pkg/util/stringutil/stringutil.go:22:16">
      <failure message="unnecessary conversion"><![CDATA[		buf[i] = byte(ss[i])]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/util/stringutil/stringutil.go:21:2">
      <failure message="ranges should only be cuddled with assignments used in the iteration"><![CDATA[	for i := range buf {]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/download.go" tests="6" errors="0" failures="6">
    <testcase name="gochecknoglobals" classname="pkg/cmd/download.go:18:5">
      <failure message="`Download` is a global variable"><![CDATA[var Download = &cli.Command{]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/download.go:34:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;download: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("download: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/download.go:39:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;download: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("download: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/download.go:47:16">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;download: %s\&#34;, err)&#34;"><![CDATA[				exit.Error(fmt.Errorf("download: %s", err))]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/cmd/download.go:24:4">
      <failure message="composites: `github.com/talismanco/mirror/pkg/util/validate.Argument` composite literal uses unkeyed fields"><![CDATA[			{"template-repo", validate.UnixPath},]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/cmd/download.go:25:4">
      <failure message="composites: `github.com/talismanco/mirror/pkg/util/validate.Argument` composite literal uses unkeyed fields"><![CDATA[			{"template-tag", validate.AlphanumericExt},]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/list.go" tests="4" errors="0" failures="4">
    <testcase name="gochecknoglobals" classname="pkg/cmd/list.go:40:5">
      <failure message="`List` is a global variable"><![CDATA[var List = &cli.Command{]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/list.go:50:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;list: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("list: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/list.go:64:16">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;list: %s\&#34;, err)&#34;"><![CDATA[				exit.Fatal(fmt.Errorf("list: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/list.go:69:16">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;list: %s\&#34;, err)&#34;"><![CDATA[				exit.Fatal(fmt.Errorf("list: %s", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/validate.go" tests="1" errors="0" failures="1">
    <testcase name="gochecknoglobals" classname="pkg/cmd/validate.go:17:5">
      <failure message="`Validate` is a global variable"><![CDATA[var Validate = &cli.Command{]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/util/git/git.go" tests="2" errors="0" failures="2">
    <testcase name="gocritic" classname="pkg/util/git/git.go:12:24">
      <failure message="hugeParam: opts is heavy (112 bytes); consider passing it by pointer"><![CDATA[func Clone(dir string, opts CloneOptions) error {]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/util/git/git.go:16:2">
      <failure message="return statements should not be cuddled if block has more than two lines"><![CDATA[	return err]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/template/functions.go" tests="2" errors="0" failures="2">
    <testcase name="gochecknoglobals" classname="pkg/template/functions.go:16:2">
      <failure message="`FuncMap` is a global variable"><![CDATA[	FuncMap = template.FuncMap{]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/template/functions.go:100:2">
      <failure message="`Options` is a global variable"><![CDATA[	Options = []string{]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/util/validation.go" tests="5" errors="0" failures="5">
    <testcase name="wsl" classname="pkg/cmd/util/validation.go:77:2">
      <failure message="only one cuddle assignment allowed before defer statement"><![CDATA[	defer os.RemoveAll(tmpDir)]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/util/validation.go:49:11">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(InvalidArg, v.Name, arg, v.Validate.TypeName())&#34;"><![CDATA[			return fmt.Errorf(InvalidArg, v.Name, arg, v.Validate.TypeName())]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/util/validation.go:65:11">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(InvalidArg, arg.Name, args[i], arg.Validate.TypeName())&#34;"><![CDATA[			return fmt.Errorf(InvalidArg, arg.Name, args[i], arg.Validate.TypeName())]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/util/validation.go:96:17">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;template directory not found\&#34;)&#34;"><![CDATA[		return false, fmt.Errorf("template directory not found")]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/util/validation.go:104:17">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;template should contain %q directory\&#34;, \&#34;template\&#34;)&#34;"><![CDATA[		return false, fmt.Errorf("template should contain %q directory", "template")]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/bash_completion.go" tests="2" errors="0" failures="2">
    <testcase name="gochecknoglobals" classname="pkg/cmd/bash_completion.go:53:5">
      <failure message="`ConfigureBashCompletion` is a global variable"><![CDATA[var ConfigureBashCompletion = &cli.Command{]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/bash_completion.go:59:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;configure-bash-completion: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("configure-bash-completion: %s", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/must_validate.go" tests="3" errors="0" failures="3">
    <testcase name="golint" classname="pkg/cmd/must_validate.go:50:25">
      <failure message="error strings should not be capitalized or end with punctuation or a newline"><![CDATA[		exit.Error(fmt.Errorf("Template registry is not initialized. Please run `init` command to initialize it."))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/must_validate.go:33:14">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;validate: %s\&#34;, err)&#34;"><![CDATA[		exit.Fatal(fmt.Errorf("validate: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/must_validate.go:38:14">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;validate: %s\&#34;, ErrTemplateInvalid)&#34;"><![CDATA[		exit.Fatal(fmt.Errorf("validate: %s", ErrTemplateInvalid))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="cmd/mirror/main.go" tests="5" errors="0" failures="5">
    <testcase name="depguard" classname="cmd/mirror/main.go:12:2">
      <failure message="`github.com/sirupsen/logrus` is in the blacklist: logging is allowed only by logutils.Log"><![CDATA[	log "github.com/sirupsen/logrus"]]></failure>
    </testcase>
    <testcase name="unparam" classname="cmd/mirror/main.go:25:10">
      <failure message="`run` - `ctx` is unused"><![CDATA[func run(ctx context.Context) (err error) {]]></failure>
    </testcase>
    <testcase name="wsl" classname="cmd/mirror/main.go:18:2">
      <failure message="only one cuddle assignment allowed before defer statement"><![CDATA[	defer cancel()]]></failure>
    </testcase>
    <testcase name="goerr113" classname="cmd/mirror/main.go:29:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;Tried to initialize your template directory, but it has failed: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("Tried to initialize your template directory, but it has failed: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="cmd/mirror/main.go:32:14">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;Failed to init: %s\&#34;, err)&#34;"><![CDATA[		exit.Error(fmt.Errorf("Failed to init: %s", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/use.go" tests="9" errors="0" failures="9">
    <testcase name="gochecknoglobals" classname="pkg/cmd/use.go:31:5">
      <failure message="`Use` is a global variable"><![CDATA[var Use = &cli.Command{]]></failure>
    </testcase>
    <testcase name="golint" classname="pkg/cmd/use.go:29:1">
      <failure message="comment on exported var `Use` should be of the form `Use ...`"><![CDATA[// TODO add --use-cache flag to execute a template from previous answers to prompts]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/cmd/use.go:26:2">
      <failure message="return statements should not be cuddled if block has more than two lines"><![CDATA[	return ok, nil]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/use.go:45:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;use: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("use: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/use.go:50:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;use: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("use: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/use.go:54:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;Template %q couldn&#39;t be found in the template registry\&#34;, tmplName)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("Template %q couldn't be found in the template registry", tmplName))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/use.go:59:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;use: %s\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("use: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/use.go:80:12">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;use: parent directory %q doesn&#39;t exist\&#34;, parentDir)&#34;"><![CDATA[				return fmt.Errorf("use: parent directory %q doesn't exist", parentDir)]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/use.go:98:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;use: %v\&#34;, err)&#34;"><![CDATA[			exit.Fatal(fmt.Errorf("use: %v", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/use_test.go" tests="3" errors="0" failures="3">
    <testcase name="wsl" classname="pkg/cmd/use_test.go:14:2">
      <failure message="assignments should only be cuddled with other assignments"><![CDATA[	tmpDirPath, err := ioutil.TempDir("", "template-test")]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/cmd/use_test.go:15:2">
      <failure message="only one cuddle assignment allowed before if statement"><![CDATA[	if err != nil {]]></failure>
    </testcase>
    <testcase name="staticcheck" classname="pkg/cmd/use_test.go:17:9">
      <failure message="SA9003: empty branch"><![CDATA[	} else {]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/prompt/prompt_test.go" tests="1" errors="0" failures="1">
    <testcase name="goconst" classname="pkg/prompt/prompt_test.go:11:34">
      <failure message="string `fieldName` has 3 occurrences, make it a constant"><![CDATA[	defval, name := "defaultValue", "fieldName"]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/version.go" tests="1" errors="0" failures="1">
    <testcase name="gochecknoglobals" classname="pkg/cmd/version.go:14:5">
      <failure message="`Version` is a global variable"><![CDATA[var Version = &cli.Command{]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/util/osutil/fs.go" tests="5" errors="0" failures="5">
    <testcase name="gocognit" classname="pkg/util/osutil/fs.go:59:1">
      <failure message="cognitive complexity 31 of func `CopyRecursively` is high (&gt; 10)"><![CDATA[func CopyRecursively(srcPath, dstPath string) error {]]></failure>
    </testcase>
    <testcase name="nestif" classname="pkg/util/osutil/fs.go:82:3">
      <failure message="`if info.IsDir()` is deeply nested (complexity: 8)"><![CDATA[		if info.IsDir() {]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/util/osutil/fs.go:22:17">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;%v: is a directory, expected file\&#34;, path)&#34;"><![CDATA[		return false, fmt.Errorf("%v: is a directory, expected file", path)]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/util/osutil/fs.go:40:17">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;%v: is a file, expected directory\&#34;, path)&#34;"><![CDATA[		return false, fmt.Errorf("%v: is a file, expected directory", path)]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/util/osutil/fs.go:62:11">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;directory %q doesn&#39;t exist\&#34;, filepath.Dir(dstPath))&#34;"><![CDATA[			return fmt.Errorf("directory %q doesn't exist", filepath.Dir(dstPath))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/delete.go" tests="2" errors="0" failures="2">
    <testcase name="gochecknoglobals" classname="pkg/cmd/delete.go:17:5">
      <failure message="`Delete` is a global variable"><![CDATA[var Delete = &cli.Command{]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/cmd/delete.go:21:29">
      <failure message="composites: `github.com/talismanco/mirror/pkg/util/validate.Argument` composite literal uses unkeyed fields"><![CDATA[		MustValidateVarArgs(args, validate.Argument{"template-path", validate.AlphanumericExt})]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/prompt/prompt.go" tests="5" errors="0" failures="5">
    <testcase name="deadcode" classname="pkg/prompt/prompt.go:13:6">
      <failure message="`templateFunc` is unused"><![CDATA[type templateFunc func() interface{}]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/prompt/prompt.go:46:2">
      <failure message="`booleanValues` is a global variable"><![CDATA[	booleanValues = map[string]bool{]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/prompt/prompt.go:115:2">
      <failure message="only one cuddle assignment allowed before if statement"><![CDATA[	if err != nil {]]></failure>
    </testcase>
    <testcase name="wsl" classname="pkg/prompt/prompt.go:129:2">
      <failure message="return statements should not be cuddled if block has more than two lines"><![CDATA[	return func() interface{} {]]></failure>
    </testcase>
    <testcase name="gosimple" classname="pkg/prompt/prompt.go:97:14">
      <failure message="S1039: unnecessary use of fmt.Sprintf"><![CDATA[			tlog.Warn(fmt.Sprintf("empty list of choices"))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/util/validate/pattern/pattern.go" tests="10" errors="0" failures="10">
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:20:2">
      <failure message="`Alpha` is a global variable"><![CDATA[	Alpha = regexp.MustCompile(alpha)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:23:2">
      <failure message="`Alphanumeric` is a global variable"><![CDATA[	Alphanumeric = regexp.MustCompile(alphanumeric)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:27:2">
      <failure message="`AlphanumericExt` is a global variable"><![CDATA[	AlphanumericExt = regexp.MustCompile(alphanumericext)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:30:2">
      <failure message="`Email` is a global variable"><![CDATA[	Email = regexp.MustCompile(email)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:33:2">
      <failure message="`Integer` is a global variable"><![CDATA[	Integer = regexp.MustCompile(integer)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:36:2">
      <failure message="`Numeric` is a global variable"><![CDATA[	Numeric = regexp.MustCompile(numeric)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:39:2">
      <failure message="`UnixPath` is a global variable"><![CDATA[	UnixPath = regexp.MustCompile(unixPath)]]></failure>
    </testcase>
    <testcase name="gochecknoglobals" classname="pkg/util/validate/pattern/pattern.go:42:2">
      <failure message="`URL` is a global variable"><![CDATA[	URL = regexp.MustCompile(url)]]></failure>
    </testcase>
    <testcase name="lll" classname="pkg/util/validate/pattern/pattern.go:6">
      <failure message="line is 325 characters"><![CDATA[	url = `^(https?:\/\/)?(\S+(:\S*)?@)?((([1-9]\d?|1\d\d|2[01]\d|22[0-3])(\.(1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.([0-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(([a-zA-Z0-9]+([-\.][a-zA-Z0-9]+)*)|((www\.)?))?(([a-z\x{00a1}-\x{ffff}0-9]+-?-?)*[a-z\x{00a1}-\x{ffff}0-9]+)(?:\.([a-z\x{00a1}-\x{ffff}]{2,}))?))(:(\d{1,5}))?((\/|\?|#)[^\s]*)?$`]]></failure>
    </testcase>
    <testcase name="lll" classname="pkg/util/validate/pattern/pattern.go:8">
      <failure message="line is 1226 characters"><![CDATA[	email    = "^(((([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+(\\.([a-zA-Z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|\\.|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|\\d|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.)+(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])|(([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])([a-zA-Z]|\\d|-|\\.|_|~|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])*([a-zA-Z]|[\\x{00A0}-\\x{D7FF}\\x{F900}-\\x{FDCF}\\x{FDF0}-\\x{FFEF}])))\\.?$"]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/template/template.go" tests="16" errors="0" failures="16">
    <testcase name="funlen" classname="pkg/template/template.go:161">
      <failure message="Function &#39;Execute&#39; is too long (93 &gt; 60)"><![CDATA[func (t *dirTemplate) Execute(dirPrefix string) error {]]></failure>
    </testcase>
    <testcase name="gocognit" classname="pkg/template/template.go:112:1">
      <failure message="cognitive complexity 20 of func `(*dirTemplate).BindPrompts` is high (&gt; 10)"><![CDATA[func (t *dirTemplate) BindPrompts() {]]></failure>
    </testcase>
    <testcase name="gocognit" classname="pkg/template/template.go:36:1">
      <failure message="cognitive complexity 17 of func `Get` is high (&gt; 10)"><![CDATA[func Get(path string) (Interface, error) {]]></failure>
    </testcase>
    <testcase name="gocritic" classname="pkg/template/template.go:31:7">
      <failure message="hugeParam: t is heavy (105 bytes); consider passing it by pointer"><![CDATA[func (t dirTemplate) Info() Metadata {]]></failure>
    </testcase>
    <testcase name="gocritic" classname="pkg/template/template.go:120:7">
      <failure message="singleCaseSwitch: should rewrite switch statement to if statement"><![CDATA[						switch v2 := v2.(type) {]]></failure>
    </testcase>
    <testcase name="gocritic" classname="pkg/template/template.go:146:5">
      <failure message="singleCaseSwitch: should rewrite switch statement to if statement"><![CDATA[				switch v := v.(type) {]]></failure>
    </testcase>
    <testcase name="ineffassign" classname="pkg/template/template.go:43:8">
      <failure message="ineffectual assignment to `err`"><![CDATA[	ctxt, err := func(fname string) (map[string]interface{}, error) {]]></failure>
    </testcase>
    <testcase name="nestif" classname="pkg/template/template.go:200:3">
      <failure message="`if info.IsDir()` is deeply nested (complexity: 11)"><![CDATA[		if info.IsDir() {]]></failure>
    </testcase>
    <testcase name="nestif" classname="pkg/template/template.go:114:3">
      <failure message="`if ok` is deeply nested (complexity: 4)"><![CDATA[		if m, ok := v.(map[string]interface{}); ok {]]></failure>
    </testcase>
    <testcase name="scopelint" classname="pkg/template/template.go:126:14">
      <failure message="Using the variable on range scope `v2` in function literal"><![CDATA[						return v2]]></failure>
    </testcase>
    <testcase name="scopelint" classname="pkg/template/template.go:152:12">
      <failure message="Using the variable on range scope `v` in function literal"><![CDATA[				return v]]></failure>
    </testcase>
    <testcase name="structcheck" classname="pkg/template/template.go:104:2">
      <failure message="`alignment` is unused"><![CDATA[	alignment         string]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/template/template.go:44:6">
      <failure message="shadow: declaration of &#34;err&#34; shadows declaration at line 37"><![CDATA[		f, err := os.Open(fname)]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/template/template.go:77:6">
      <failure message="shadow: declaration of &#34;err&#34; shadows declaration at line 37"><![CDATA[		b, err := ioutil.ReadFile(filepath.Join(absPath, config.TemplateMetadataName))]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/template/template.go:129:6">
      <failure message="shadow: declaration of &#34;v&#34; shadows declaration at line 113"><![CDATA[					v, p := v2, prompt.New(k, v2)]]></failure>
    </testcase>
    <testcase name="govet" classname="pkg/template/template.go:213:7">
      <failure message="shadow: declaration of &#34;err&#34; shadows declaration at line 207"><![CDATA[			if err := os.Remove(target); err != nil && !os.IsNotExist(err) {]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/template/metadata.go" tests="2" errors="0" failures="2">
    <testcase name="gosimple" classname="pkg/template/metadata.go:20:12">
      <failure message="S1012: should use `time.Since` instead of `time.Now().Sub`"><![CDATA[	tDelta := time.Now().Sub(time.Time(m.Created))]]></failure>
    </testcase>
    <testcase name="gosimple" classname="pkg/template/metadata.go:58:9">
      <failure message="S1025: the argument is already a string, there&#39;s no need to use fmt.Sprintf"><![CDATA[	return fmt.Sprintf("%s", time.Time(t).Format(timeFormat))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/save.go" tests="5" errors="0" failures="5">
    <testcase name="gochecknoglobals" classname="pkg/cmd/save.go:18:5">
      <failure message="`Save` is a global variable"><![CDATA[var Save = &cli.Command{]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/save.go:37:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;save: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("save: %s", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/save.go:42:16">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;save: %v\&#34;, err)&#34;"><![CDATA[				exit.Error(fmt.Errorf("save: %v", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/save.go:50:16">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;save: %v\&#34;, err)&#34;"><![CDATA[				exit.Error(fmt.Errorf("save: %v", err))]]></failure>
    </testcase>
    <testcase name="goerr113" classname="pkg/cmd/save.go:64:15">
      <failure message="err113: do not define dynamic errors, use wrapped static errors instead: &#34;fmt.Errorf(\&#34;save: %s\&#34;, err)&#34;"><![CDATA[			exit.Error(fmt.Errorf("save: %s", err))]]></failure>
    </testcase>
  </testsuite>
  <testsuite name="pkg/cmd/metadata.go" tests="1" errors="0" failures="1">
    <testcase name="govet" classname="pkg/cmd/metadata.go:23:7">
      <failure message="composites: `github.com/talismanco/mirror/pkg/template.Metadata` composite literal uses unkeyed fields"><![CDATA[	t := template.Metadata{tag, repo, template.NewTime()}]]></failure>
    </testcase>
  </testsuite>
</testsuites>